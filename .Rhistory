mids <- sort(unlist(delays[2]))
mids
delayTitle = paste("Total Delay Minutes from", input$origin_select, "to", input$dest_select)
# make plot
p = ggplot(delays, aes(x = reorder(Code, DelayMinutes, na.rm = TRUE, FUN = median), y = DelayMinutes))
p + geom_boxplot(middle = mids, aes(fill = Code)) +
scale_fill_brewer(palette = "Set2", name = "Carriers") +
ylim(-50, 50) +
xlab('') +
ylab('Arrival Delay (minutes)') +
ggtitle(delayTitle) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
text = element_text(size = 16)) +
theme(legend.position="none")
delayTitle
delay_title <- "Total Delays"
delay_title <- "Total Delays"
delayTitle = paste("Total Delay Minutes from", input$origin_select, "to", input$dest_select)
# make plot
p = ggplot(delays, aes(x = reorder(Code, DelayMinutes, na.rm = TRUE, FUN = median), y = DelayMinutes))
p + geom_boxplot(middle = mids, aes(fill = Code)) +
scale_fill_brewer(palette = "Set2", name = "Carriers") +
ylim(-50, 50) +
xlab('') +
ylab('Arrival Delay (minutes)') +
ggtitle(delayTitle) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
text = element_text(size = 16)) +
theme(legend.position="none")
# make plot
p = ggplot(delays, aes(x = reorder(Code, DelayMinutes, na.rm = TRUE, FUN = median), y = DelayMinutes))
p + geom_boxplot(middle = mids, aes(fill = Code)) +
scale_fill_brewer(palette = "Set2", name = "Carriers") +
ylim(-50, 50) +
xlab('') +
ylab('Arrival Delay (minutes)') +
ggtitle(delayTitle) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
text = element_text(size = 16)) +
theme(legend.position="none")
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
delays
rm delays
delays rm
rm(delays)
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
shiny::runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
medians
medians = group_by(subset_delay, Code) %>% summarise(median(DelayMinutes, na.rm = T))
medians_sorted = sort(unlist(medians[2]))
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
flights$Day
levels(flights$Day)
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
Origin
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
m <- group_by(subest_delay,flights$Code) %>% summarise(median(DelayMinutes, na.rm = T))
m <- group_by(flights,flights$Code) %>% summarise(median(DelayMinutes, na.rm = T))
m <- group_by(flights,flights$Code) %>% summarise(mean(DelayMinutes, na.rm = T))
fd <- subset_delay = subset(flights,
Origin == "Dallas/FOrth Worth, TX" &
Destination == "Seatlle, WA" &
Month == "January" &
Day == i"nput$day_select"1"")
fd <- subset_delay = subset(flights,
Origin == "Dallas/FOrth Worth, TX" &
Destination == "Seatlle, WA" &
Month == "January" &
Day == "1")
fd <- subset(flights,
Origin == "Dallas/FOrth Worth, TX" &
Destination == "Seatlle, WA" &
Month == "January" &
Day == "1")
fd
fd <- subset(flights,
Origin == "Dallas/Fort Worth, TX" &
Destination == "Seatlle, WA" &
Month == "January" &
Day == "1")
fd
fd <- subset(flights,
Origin == "Dallas/Fort Worth,TX" &
Destination == "Seatlle,WA" &
Month == "January" &
Day == "1")
fd
fd <- subset(flights,
Origin == "Dallas/Fort Worth,TX" &
Destination == "Seatlle,WA" &
Month == "January" &
Day == "01")
fd
fd <- subset(flights,Origin == "Dallas/Fort Worth,TX" &
Destination == "Seatlle,WA" &
Month == "January" &
Day == "01")
fd
flights$Origin
fd <- subset(flights,Origin == "Dallas/Fort Worth, TX" &
Destination == "Seatlle, WA" &
Month == "January" &
Day == "1")
fd
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
sd <- subset(flights,Origin=="Dallas/Forth Worth, TX" & Destination == "Seattle, WA" & Month == "January")
sd
sd <- subset(flights,Carrier == "AA" & Month == "January" & Day == "1")
colnames(flights)
sd <- subset(flights,Month == "January" & Day == "1")
sd
head(sd)
sd <- subset(flights,Month == "January" & Day == "1", Origin = "Chicago, IL")
sd
head(sd)
sd <- subset(flights,Month == "January" & Day == "1", Origin == "Chicago, IL" & Destination == "Seattle, WA")
sd
sd <- subset(flights,Month == "January" & Day == "1", Origin == "Chicago, IL" & Destination == "Dallas/Fort Worth, TX")
sd
sd <- subset(flights,Month == "January" & Day == "1", Origin == "Chicago, IL")
sd
sd <- subset(flights,Month == "January" & Day == "1")
sd
head(sd)
mg <- group_by(sd,Code) %>% summarise(mean(DelayMinutes,na.rm = T))
mg
ms <- sort(unlist(ms[2]))
mg <- group_by(sd,Code) %>% summarise(mean(DelayMinutes,na.rm = T))
ms <- sort(unlist(mg[2]))
ms
mg <- group_by(sd,Code) %>% summarise(medians(DelayMinutes,na.rm = T))
mg <- group_by(sd,Code) %>% summarise(median(DelayMinutes,na.rm = T))
ms <- sort(unlist(mg[2]))
ms
mg
mg <- group_by(sd,Code) %>% summarise(mean(DelayMinutes,na.rm = T))
mg
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
shiny::runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
install.packages("Scales")
library(ggplot2)
install.packages()
install.packages('scales')
library(ggplot2)
shiny::runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
ss <- subset(flights,Origin == "Dallas/Forth Worth, TX" & Destination == "Seattle, WA" & Month == "January" & Day == "1")
ss
ss <- subset(flights,Origin == "Dallas/Fort Worth, TX" & Destination == "Seattle, WA" & Month == "January" & Day == "1")
ss
totalMins<- aggregate(DelayMinutes ~ Code * Day, ss,sum)
totalMins
totalMins<- aggregate(DelayMinutes ~ Code * Day, ss,mean)
totalMins
count(ss$Code)
p = ggplot(ss, aes(x = Code, na.rm = TRUE))
p + geom_bar(aes (fill = Code, y = (..count..)/sum(..count..))) +
scale_y_continuous(labels = percent)
ggtitle(paste(" Total Minutes delay from", input$origin_select, "to", input$dest_select, input$month_select, input$day_select))+
xlab('Airline') + ylab("Percent Delay")
ggtitle(paste(" Total Minutes delay)+
xlab('Airline') + ylab("Percent Delay")
ggtitle(paste(" Total Minutes delay from", input$origin_select, "to", input$dest_select, input$month_select, input$day_select))+
xlab('Airline') + ylab("Percent Delay")
length(ss$Code)
levels(ss$Code)
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
ss
totalMins<- aggregate(DelayMinutes ~ Code * Day, ss,sum)
totalMins
s1 <- subset(ss,Code == "American Airlines, Inc.")
s1
ss
s1 <- subset(ss,Code == "American Airlines Inc.")
s1
ss
totalMins
avgMins<- aggregate(DelayMinutes ~ Code * Day, ss,mean)
avgMins
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
colnames(flights)
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
colnames(flights)
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
sF <- flights[c(3,1,2,4,5,7,8,9,10,11,12,13,14)]
sF <- flights[c(3,1,2,4,5,7,8,9,10,11,12,13]
sF <- flights[c(3,1,2,4,5,7,8,9,10,11,12,13)]
colnamses(flights)
colnames(flights)
shiny::runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
sF <- flights[c(3,1,2,4,5,7,8,9,10,11,12,13,14)]
colnames(sF)
colnames(flights)
flights$X
colnames(flights)
source('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject/preprocess.R')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
colnames(flights)
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
sFlights <- flights[c(15,5,6,9,10,8,11,12,13,14)]
colnames(sFlights)
colnames(flights)
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
sFlights <- flights[c(15,3,4,5,6,9,10,8,11,12,13,14)]
sd <- subset(sFlights,Origin == "Dallas/Fort Worth, TX" &  Destination == "Seattle, WA" & Month == "January" & Day == "1")
sd
sd <- order[(sd$DepartDelay),]
shiny::runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
s <- fliter(flighs,Origin == "Dallas/FOrth Worth, TX, Destination == "Seattle, WA", Month=="January",Day=="1")
s <- fliter(flights,Origin == "Dallas/FOrth Worth, TX, Destination == "Seattle, WA", Month=="January",Day=="1")
s <- fliter(flights,Origin == "Dallas/Fort Worth, TX", Destination == "Seattle, WA", Month=="January",Day=="1")
s <- filter(flights,Origin == "Dallas/Fort Worth, TX", Destination == "Seattle, WA", Month=="January",Day=="1")
s
s$DepartDelay=ifelse(subset_delay$DepartDelay<0,0,subset_delay$DepartDelay)
s$DepartDelay=ifelse(s$DepartDelay<0,0,s$DepartDelay)
s$DepartDelay
s$ArrivalDelay=ifelse(s$ArrivalDelay<0,0,s$ArrivalDelay)
s$ArrivalDelay
pd <- s %>% gather(dt,newdelay,DepartDelay:ArrivalDelay)
pd
pdm <- mutate(dt= ifelse(dt=="delay","Departure Delay","Arrival Delay"))
pd <- s %>% gather(dt,newdelay,DepartDelay:ArrivalDelay)
gather(dt,newdelay,DepartDelay:ArrivalDelay) %>%
mutate(dt = ifelse(dt=="delay","Departure Delay","Arrival Delay")) %>%
group_by(DepartTime,dt)
colnames(pd)
pd <- s %>% gather(dt,newdelay,DepartDelay:ArrivalDelay)
gather(dt,newdelay,DepartDelay:ArrivalDelay) %>%
mutate(dt = ifelse(dt=="delay","Departure Delay","Arrival Delay")) %>%
group_by(DepTime,dt)
pd <- s %>% gather(dt,newdelay,DepartDelay:ArrivalDelay)
gather(dt,newdelay,DepartDelay:ArrivalDelay) %>%
mutate(dt = ifelse(dt=="delay","Departure Delay","Arrival Delay"))
pd
s <- filter(flights,Origin == "Dallas/Fort Worth, TX", Destination == "Seattle, WA", Month=="January",Day=="1")
s$DepartDelay=ifelse(s$DepartDelay<0,0,s$DepartDelay)
s$ArrivalDelay=ifelse(s$ArrivalDelay<0,0,s$ArrivalDelay)
plot_data = s %>%
gather(delay_type,newdelay,DepartDelay:ArrivalDelay) %>%
mutate(delay_type = ifelse(delay_type=="delay","Departure Delay","Arrival Delay")) %>%
group_by(hour,delay_type) %>%
dplyr::summarise(mu=mean(newdelay,na.rm=TRUE),
se=sqrt(var(newdelay,na.rm=TRUE)/length(na.omit(newdelay))),
obs=length(na.omit(newdelay)))
s$hour <- round(s$DepTime/100,0)
plot_data = s %>%
gather(delay_type,newdelay,DepartDelay:ArrivalDelay) %>%
mutate(delay_type = ifelse(delay_type=="delay","Departure Delay","Arrival Delay")) %>%
group_by(hour,delay_type) %>%
dplyr::summarise(mu=mean(newdelay,na.rm=TRUE),
se=sqrt(var(newdelay,na.rm=TRUE)/length(na.omit(newdelay))),
obs=length(na.omit(newdelay)))
plot_data
[d]
pd
pd
head(pd)
pd <- s %>% gather(dt,newdelay,DepartDelay:ArrivalDelay)
pd
plot_data
pd
head(s)
colnames(flights)
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
s
s <- s[c(4,5,2,6,9,10,12)]
s
s$hour
s$hour <- round(subset_delay$DepTime/100,0)
s$hour <- round(s$DepTime/100,0)
s$DepartDelay <- ifelse(s$DepartDelay<0,0,s$DepartDelay)
s$ArrivalDelay <- ifelse(s$ArrivalDelay<0,0,s$DepartDelay)
subset_delay <- s
subset_delay
plot_data = subset_delay %>%
gather(delay_type,newdelay,DepartDelay:ArrivalDelay) %>%
mutate(delay_type = ifelse(delay_type=="delay","Departure Delay","Arrival Delay")) %>%
group_by(hour,delay_type) %>%
dplyr::summarise(mu=mean(newdelay,na.rm=TRUE),
se=sqrt(var(newdelay,na.rm=TRUE)/length(na.omit(newdelay))),
obs=length(na.omit(newdelay)))
plot_data
plot_data = subset_delay %>%
gather(delay_type,newdelay,DepartDelay:ArrivalDelay)
plot_data
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
shiny::runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
source('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject/preprocess.R')
source('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject/preprocess.R')
source('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject/preprocess.R')
class(fDate)
source('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject/preprocess.R')
head(flight$DOW)
colnames(flight)
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
shiny::runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
runApp('C:/Users/DEDWARD2/Desktop/GitHub/DPFinalProject')
source('~/GitHub/DataProductsFinal/preprocess.R')
source('~/GitHub/DataProductsFinal/preprocess.R')
source('~/GitHub/DataProductsFinal/preprocess.R')
source('~/GitHub/DataProductsFinal/preprocess.R')
source('~/GitHub/DataProductsFinal/preprocess.R')
source('~/GitHub/DataProductsFinal/preprocess.R')
shiny::runApp('GitHub/DataProductsFinal')
runApp('GitHub/DataProductsFinal')
runApp('GitHub/DataProductsFinal')
runApp('GitHub/DataProductsFinal')
source('~/GitHub/DataProductsFinal/preprocess.R')
source('~/GitHub/DataProductsFinal/preprocess.R')
runApp('GitHub/DataProductsFinal')
source('~/GitHub/DataProductsFinal/preprocess.R')
source('~/GitHub/DataProductsFinal/preprocess.R')
source('~/GitHub/DataProductsFinal/preprocess.R')
runApp('GitHub/DataProductsFinal')
source('~/GitHub/DataProductsFinal/preprocess.R')
runApp('GitHub/DataProductsFinal')
runApp('GitHub/DataProductsFinal')
runApp('GitHub/DataProductsFinal')
runApp('GitHub/DataProductsFinal')
runApp('GitHub/DataProductsFinal')
source('~/GitHub/DataProductsFinal/preprocess.R')
source('~/GitHub/DataProductsFinal/preprocess.R')
source('~/GitHub/DataProductsFinal/preprocess.R')
runApp('GitHub/DataProductsFinal')
source('~/GitHub/DataProductsFinal/preprocess.R')
runApp('GitHub/DataProductsFinal')
source('~/GitHub/DataProductsFinal/preprocess.R')
source('~/GitHub/DataProductsFinal/preprocess.R')
runApp('GitHub/DataProductsFinal')
shiny::runApp('GitHub/DataProductsFinal')
runApp('GitHub/FinalProject')
install.packages(rconnect)
install.packages(rsconnect)
library(rsconnect)
deployApp()
shiny::runApp('GitHub/FinalProject')
runApp('GitHub/FinalProject')
runApp('GitHub/FinalProject')
runApp('GitHub/FinalProject')
source('~/GitHub/ReproducibleDataProject1/meanStepsTaken.R')
imputedSumSteps[whic.max(imputedSumSteps$steps),1]
imputedSumSteps[which.max(imputedSumSteps$steps),1]
imputedSumSteps[which.max(imputedSumSteps$steps)]
imputedSumSteps[which.max(imputedSumSteps$steps),2]
which(imputedSumSteps$steps > 15000)
which(imputedSumSteps$steps < 5000)
which(imputedSumSteps$steps < 5000)[,1]
which(imputedSumSteps$steps < 5000)[1,]
which(imputedSumSteps$steps < 5000)[1]
which(imputedSumSteps$steps > 11000 & imputedSumSteps$steps < 12000)
which(imputedSumSteps$steps > 11250 & imputedSumSteps$steps < 11500)
which(imputedSumSteps$steps > 11000 & imputedSumSteps$steps < 12000)
which(imputedSumSteps$steps == 5000)
which(imputedSumSteps$steps > 5000)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 11500)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 11000)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10500)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10750)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10800)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10775)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10700)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10720)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10725)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10730)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10735)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10750)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10760)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10770)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10765)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10767)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.1)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.5)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.3)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.2)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.15)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.16)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.17)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.18)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.19)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.185)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.186)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.187)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.188)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.189)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.1851)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.1855)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.1860)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.1870)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.1890)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.1885)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.1887)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.1886)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.18865)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.188655)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.188660)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766.188665)
imputedSumSteps$steps
arrange()
order(imputedSumSteps$steps)
imputedSumSteps$steps
imputedSumSteps[order(steps)]
imputedSumSteps[order(steps),]
lll <- imputedSumSteps[order(steps),]
colnames(imputedSumSteps)
lll <- imputedSumSteps[order(steps),]
class(imputedSumSteps)
attach(mtcars)
mtcars[order(mpg),1]
colnames(mtcars)
imputedSumSteps[order(steps),1]
attach(imputedSumSteps)
imputedSumSteps[order(steps),1]
imputedSumSteps[order(steps),2]
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 12500)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 11120)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 11100)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 11500)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10625)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10600)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10650)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 10766)
which(imputedSumSteps$steps > 10000 & imputedSumSteps$steps < 11015)
